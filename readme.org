* Links:
- https://gbdev.io/pandocs/Specifications.html
- https://gbdev.io/pandocs/Graphics.html
- https://gbdev.io/rgbds-live/
- https://bgb.bircd.org/pandocs.html
- http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf
- http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html
- http://imrannazar.com/GameBoy-Emulation-in-JavaScript:-The-CPU
- https://realboyemulator.wordpress.com/2013/01/03/a-look-at-the-game-boy-bootstrap-let-the-fun-begin/
- https://realboyemulator.wordpress.com/2013/01/01/the-nintendo-game-boy-1/
- http://gameboy.mongenel.com/dmg/asmmemmap.html
- http://www.devrs.com/gb/
- http://www.devrs.com/gb/files/opcodes.html
- http://www.devrs.com/gb/files/gbspec.txt
- http://verhoeven272.nl/cgi-bin/FS?fruttenboel%2FGameboy&Gameboy+section&GBtop&GBsummary&GBcontent
- http://meatfighter.com/gameboy/GBCribSheet000129.pdf
- http://meatfighter.com/gameboy/TheNintendoGameboy.pdf
- http://gbdev.gg8.se/wiki/articles/Main_Page
- http://gbdev.gg8.se/wiki/articles/Pan_Docs
- http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header

- the clock speed of the GB is 4.19mhz or 4194304
- 1 frame takes 70224 dots and there are ~60 frames per second
- there are 154 scanlines in a frame
- each scanline takes 456 dots
- a t-cycle is the base unit of time, a dot is 4 t-cycles
- LY starts at 0 and increments up to 143, scanlines 144->153 are vblank
- reset LY at scanline 153

TODO:
- [x] decide what to do with the ~Thunk~ type param signature, if i refactor this it means changing all of the dispatch table params as well
- [x] create prefix table for bitwise ops dispatched from 0xcb
- Decoding:
  - [x] bitshift instructions
  - [x] loadh immed -> a
  - [x] jump/subroutine instructions
  - [x] carry flag instructions
  - [ ] stack manipulation instructions
  - e8 instructions
  - [ ] halt instruction
  - [ ] DAA 

- Timing:

  Sections of memory are inaccessible during PPU  modes 2/3 which isn't "directly" tied
  to anything in the timing, since mode 3 can run for a variable amount of timte
  I thought one of the lcd registers contained something about mode 3 but it seems that only mode's 0-2
  are represented in the LCD status register, so how do i coordinate the access to those
  memory regions with the ppu's current mode
  
  Some context:
  - each scanline runs for 70224 dots
  - 59.7 frames per second
    (insert (format "%d" (* 59.7 70224))) = 4192372 (which is the clock speed of the console)
  
  - [ ] 
- Interrupts:
  - [ ] figure out how to coordinate interrupts
- Rendering:
  - [ ] 
   
