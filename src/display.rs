extern crate sdl3;

use sdl3::pixels::{Color, PixelFormat};
use sdl3::render::{Canvas, FRect, Texture, TextureAccess};
use sdl3::sys::pixels::{SDL_PixelFormat, SDL_PixelFormatDetails, SDL_PIXELFORMAT_RGB24};
use sdl3::video::Window;
use sdl3::{Error, EventPump};

use crate::clock::Clock;
use crate::memory::Memory;
use crate::memory::registers::LY;
/// ```ignore
/// These modes represent the modes the PPU cycles between during a frame
///
/// A frame consists of 154 scan lines, during the first 144 the screen is drawn top to bottom, left to right
/// A “dot” = one 222 Hz (≅ 4.194 MHz) time unit.
///
///      |OAMScan |    Drawing     |    HorizontalBlank   |
///      | 80 dots| 172-289 dots   | 87-204 dots
///               |----------------| VRAM (8000-9FFF) accessible
///      |-------------------------| OAM inaccessible
/// LY=0 |        |                |                      |
///  144 |-------------- Vertical Blank ------------------|
///  ... |             Everything Accessible              |
///  153 |-------------- Vertical Blank ------------------|
/// ```
/// Read more: https://gbdev.io/pandocs/Rendering.html
#[derive(PartialEq, Eq)]
pub enum PpuMode {
    HorizontalBlank, // waiting until the end of the scanline
    VerticalBlank,   // waiting until the next frame
    OAMScan,         // searching for OBJS which overlap this line
    Drawing,         // sending pixels to the LCD
}
pub const PALETTE: [u8; 4] = [255, 170, 85, 0];

pub struct Ppu {
    pub canvas: Canvas<Window>,
    pub event_pump: EventPump,
    pub obj_penalty: usize,
    pub scanline: u16,
    pub mode: PpuMode,
    pub frame_buffer: Vec<u16>,
}

impl Ppu {
    pub fn new() -> Self {
        let (canvas, event_pump) = setup_ctx().unwrap();
        Self {
            canvas,
            event_pump,
            obj_penalty: 0,
            scanline: 0,
            mode: PpuMode::OAMScan,
            frame_buffer: vec![],
        }
    }
    pub fn oam_scan(&mut self, mem: &mut Memory, scanline: u8) {
        let oam = mem.get_oam();
        for chunk in oam.chunks_exact(4) {
            if chunk[0] == scanline {
            }
        }
    }
    pub fn test(&mut self) {
        let texture_creator = self.canvas.texture_creator();
        let mut texture = texture_creator.create_texture(
            PixelFormat::try_from(SDL_PIXELFORMAT_RGB24).unwrap(),
            TextureAccess::Streaming,
            640,
            480,
        ).unwrap();
        let mut pixels = TILES.chunks_exact(2).flat_map(|tile| {
            (0..8).map(move |i| {
                let mut int = (tile[0] >> i) & 1;
                int |= ((tile[1] >> i) & 1) << 1;
                PALETTE[int as usize]
            })
        }).collect::<Vec<u8>>();
        let mut rgb_pixels = [0u8; 13440];

        texture.update(None, &rgb_pixels, 8 * 3).unwrap();

        self.canvas.copy(&texture, None, None).unwrap();
        // println!("{tiles:?}");
    }
    pub fn render_scanline(&mut self, mem: &mut Memory, clock: &Clock) {
        let scanline = mem.read(LY);
        let lcdc = mem.lcd_control();
        match scanline {
            143 => self.mode = PpuMode::VerticalBlank,
            _ => (),
        };
        match clock.dots {
            0..=80 => {
                self.oam_scan(mem, scanline);
                self.mode = PpuMode::OAMScan;
            }
            81 => {
                // TODO: add obj penalty variable mode length algorithm
                self.mode = PpuMode::Drawing;
                mem.oam_accessible = false;
                mem.vram_accessible = false;
            }
            _ => (),
        }
    }
}

pub fn setup_ctx() -> Result<(Canvas<Window>, EventPump), Error> {
    let sdl_context = sdl3::init()?;
    let video_subsystem = sdl_context.video()?;
    let window = video_subsystem
        .window("test", 640, 480)
        .position_centered()
        .build()
        .unwrap();

    Ok((window.into_canvas(), sdl_context.event_pump()?))
}

pub const TILEMAP: [u8; 576] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x01, 0x02, 0x03, 0x01, 0x04, 0x03,
    0x01, 0x05, 0x00, 0x01, 0x05, 0x00, 0x06, 0x04, 0x07, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0b, 0x0e, 0x0f, 0x08, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x0f, 0x14, 0x1b, 0x0f, 0x14, 0x1c, 0x16, 0x1d, 0x00, 0x00,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x22,
    0x25, 0x1e, 0x22, 0x25, 0x26, 0x22, 0x27, 0x1d, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0x00, 0x00, 0x01, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2b, 0x2e, 0x2d, 0x2f, 0x30, 0x2d, 0x31,
    0x32, 0x33, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x08, 0x34, 0x0a, 0x0b,
    0x11, 0x0a, 0x0b, 0x35, 0x36, 0x0b, 0x0e, 0x0f, 0x08, 0x37, 0x0a, 0x38, 0x00, 0x00, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x14, 0x39, 0x16, 0x17, 0x1c, 0x16, 0x17, 0x3a, 0x3b, 0x17,
    0x1b, 0x0f, 0x14, 0x3c, 0x16, 0x1d, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00,
    0x1e, 0x3d, 0x3e, 0x3f, 0x22, 0x27, 0x21, 0x1f, 0x20, 0x21, 0x22, 0x25, 0x1e, 0x22, 0x40, 0x1d,
    0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x30,
    0x33, 0x41, 0x45, 0x43, 0x41, 0x30, 0x43, 0x41, 0x30, 0x33, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
];

pub const TILES: [u8; 1120] = [
    0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
    0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
    0x00, 0xff, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e,
    0x00, 0xff, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
    0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f,
    0x00, 0xff, 0x03, 0xfc, 0x00, 0xf8, 0x00, 0xf0, 0x00, 0xe0, 0x20, 0xc0, 0x00, 0xc0, 0x40, 0x80,
    0x00, 0xff, 0xc0, 0x3f, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x07, 0x04, 0x03, 0x00, 0x03, 0x02, 0x01,
    0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0x80,
    0x00, 0x7e, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x01, 0xff, 0x01, 0x00, 0x01, 0x01, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x00, 0x01,
    0x00, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x00, 0x80, 0xff, 0x80, 0x7f, 0x80, 0x80, 0x80,
    0x00, 0x7f, 0x2a, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xfa, 0x07, 0xfd, 0x07, 0x02, 0x07,
    0x00, 0x7f, 0x2a, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f,
    0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff,
    0x40, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0x80,
    0x00, 0x3c, 0x02, 0x7e, 0x85, 0x7e, 0x0a, 0x7e, 0x14, 0x7e, 0xab, 0x7e, 0x95, 0x7e, 0x2a, 0x7e,
    0x02, 0x01, 0x00, 0x01, 0xff, 0x01, 0x00, 0x01, 0x01, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x00, 0x01,
    0x00, 0xff, 0x80, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f,
    0xf8, 0x07, 0xf8, 0x07, 0xf8, 0x07, 0x80, 0xff, 0x00, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80,
    0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xeb, 0x3c,
    0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0xff,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x80, 0xff,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xaa, 0xff,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0x80, 0xff,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0xff,
    0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0x80, 0xff,
    0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xc0, 0x1f, 0xe0, 0x1f, 0xe0, 0x0f, 0xf0, 0x03, 0xfc, 0x00, 0xff,
    0xfd, 0x03, 0xfc, 0x03, 0xfd, 0x03, 0xf8, 0x07, 0xf9, 0x07, 0xf0, 0x0f, 0xc1, 0x3f, 0x82, 0xff,
    0x55, 0xff, 0x2a, 0x7e, 0x54, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0x00, 0x7e,
    0x01, 0xff, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01,
    0x54, 0xff, 0xae, 0xf8, 0x50, 0xf0, 0xa0, 0xe0, 0x60, 0xc0, 0x80, 0xc0, 0x40, 0x80, 0x40, 0x80,
    0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0xff, 0x6a, 0x1f, 0x05, 0x0f, 0x02, 0x07, 0x05, 0x07, 0x02, 0x03, 0x03, 0x01, 0x02, 0x01,
    0x54, 0xff, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80,
    0x55, 0xff, 0x2a, 0x1f, 0x0d, 0x07, 0x06, 0x03, 0x01, 0x03, 0x02, 0x01, 0x01, 0x01, 0x00, 0x01,
    0x55, 0xff, 0x2a, 0x7f, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0x00, 0x7f,
    0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0x00, 0xff,
    0x15, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0xff, 0x6a, 0x1f, 0x0d, 0x07, 0x06, 0x03, 0x01, 0x03, 0x02, 0x01, 0x03, 0x01, 0x00, 0x01,
    0x54, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff, 0x50, 0xff, 0xa0, 0xff, 0x40, 0xff, 0x00, 0xff,
    0x00, 0x7e, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xab, 0x76, 0xdd, 0x66, 0x22, 0x66,
    0x00, 0x7c, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7c, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x01, 0xff, 0x01, 0x02, 0x01, 0x07, 0x01, 0xfe, 0x03, 0xfd, 0x07, 0x0a, 0x0f,
    0x00, 0x7c, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e,
    0x00, 0xff, 0xa0, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xaa, 0xff,
    0xdd, 0x62, 0xbf, 0x42, 0xfd, 0x42, 0xbf, 0x40, 0xff, 0x00, 0xff, 0x00, 0xf7, 0x08, 0xef, 0x18,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xab, 0x7c, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e,
    0xf9, 0x07, 0xfc, 0x03, 0xfd, 0x03, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7c,
    0xf7, 0x18, 0xeb, 0x1c, 0xd7, 0x3c, 0xeb, 0x3c, 0xd5, 0x3e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xa2, 0xff,
    0x7f, 0xc0, 0xbf, 0xc0, 0x7f, 0xc0, 0xbf, 0xe0, 0x5f, 0xe0, 0xaf, 0xf0, 0x57, 0xfc, 0xaa, 0xff,
    0xff, 0x01, 0xfc, 0x03, 0xfd, 0x03, 0xfc, 0x03, 0xf9, 0x07, 0xf0, 0x0f, 0xc1, 0x3f, 0x82, 0xff,
    0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x00, 0xff,
    0x45, 0xff, 0xa2, 0xff, 0x41, 0xff, 0x82, 0xff, 0x41, 0xff, 0x80, 0xff, 0x01, 0xff, 0x00, 0xff,
    0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0x00, 0xff,
    0x15, 0xff, 0x2a, 0xff, 0x15, 0xff, 0x0a, 0xff, 0x15, 0xff, 0x0a, 0xff, 0x01, 0xff, 0x00, 0xff,
    0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x00, 0xff,
];
