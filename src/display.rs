extern crate sdl3;

use sdl3::pixels::{Color, PixelFormat};
use sdl3::rect::Rect;
use sdl3::render::{Canvas, FRect, Texture, TextureAccess, TextureCreator};
use sdl3::sys::pixels::{SDL_PixelFormat, SDL_PixelFormatDetails, SDL_PIXELFORMAT_ABGR32, SDL_PIXELFORMAT_RGB24};
use sdl3::sys::rect::SDL_GetRectAndLineIntersectionFloat;
use sdl3::sys::stdinc::SDL_sinf;
use sdl3::video::{Window, WindowContext};
use sdl3::{Error, EventPump};

use crate::clock::Clock;
use crate::io::LcdControl;
use crate::memory::Memory;
use crate::memory::registers::{LCDC, LY};

/// ```ignore
/// These modes represent the modes the PPU cycles between during a frame
///
/// A frame consists of 154 scan lines, during the first 144 the screen is drawn top to bottom, left to right
/// A “dot” = one 222 Hz (≅ 4.194 MHz) time unit.
///
///      |OAMScan |    Drawing     |    HorizontalBlank   |
///      | 80 dots| 172-289 dots   | 87-204 dots
///               |----------------| VRAM (8000-9FFF) accessible
///      |-------------------------| OAM inaccessible
/// LY=0 |        |                |                      |
///  144 |-------------- Vertical Blank ------------------|
///  ... |             Everything Accessible              |
///  153 |-------------- Vertical Blank ------------------|
/// ```
/// Read more: https://gbdev.io/pandocs/Rendering.html
#[derive(PartialEq, Eq)]
pub enum PpuMode {
    HorizontalBlank, // waiting until the end of the scanline
    VerticalBlank, // waiting until the next frame, all vram sectitons become accessible to cpu
    OAMScan, // searching for OBJS which overlap the current scanline
    Drawing, // sending pixels to the LCD
}
pub const PALETTE: [u8; 4] = [255, 170, 85, 0];

pub struct Ppu {
    pub canvas: Canvas<Window>,
    pub event_pump: EventPump,
    pub obj_penalty: usize,
    pub scanline: u16,
    pub mode: PpuMode,
    pub frame_buffer: Vec<u8>,
    pub texture_creator: TextureCreator<WindowContext>
}

impl Ppu {
    pub fn new() -> Self {
        let (canvas, event_pump) = setup_ctx().unwrap();
        let texture_creator = canvas.texture_creator();
        Self {
            canvas,
            event_pump,
            obj_penalty: 0,
            scanline: 0,
            mode: PpuMode::OAMScan,
            frame_buffer: vec![],
            texture_creator
        }
    }
    pub fn oam_scan(&mut self, mem: &mut Memory, scanline: u8) {
        let oam = mem.get_oam();
        for chunk in oam.chunks_exact(4) {
            if chunk[0] == scanline {
            }
        }
    }

    pub fn render_scanline(&mut self, mem: &mut Memory, clock: &Clock, lcdc:  &LcdControl) {
        let scanline = mem.read(LY);
        let mut texture = self.texture_creator.create_texture_streaming(
            PixelFormat::try_from(SDL_PIXELFORMAT_RGB24).unwrap(),
            256,
            256
        ).unwrap();
        let window_tile_map = &mem.block[lcdc.window_tile_map_area[0]..=lcdc.window_tile_map_area[1]];
        let bg_tile_map = &mem.block[lcdc.bg_tile_map_area[0]..=lcdc.bg_tile_map_area[1]];
        let mut tile_block_0: [[u8; 64]; 128] = [[0u8; 64]; 128];
        let mut tile_block_1: [[u8; 64]; 128] = [[0u8; 64]; 128];
        &mem.block[lcdc.tile_data_area[0][0]..=lcdc.tile_data_area[0][1]].chunks_exact(16).enumerate().for_each(|(i, tile)| {
            tile_block_0[i] = decode_tile(tile);
        });
        &mem.block[lcdc.tile_data_area[1][0]..=lcdc.tile_data_area[1][1]].chunks_exact(16).enumerate().for_each(|(i, tile)| {
            tile_block_1[i] = decode_tile(tile);
        });
        texture.with_lock(None, |buffer: &mut [u8], pitch: usize| {
            // tile maps are 32x32
            for y in 0..32 {
                for x in 0..32 {
                    let tile_map = window_tile_map[x * y];
                    // tiles are 8x8
                    for i in 0..8 {
                        for j in 0..8 {
                            let offset = (y * 8 + j) * pitch + (x * 8 + i) * 3;
                            let tile_index: usize = i * j;
                            let pixel = tile_block_1[tile_map as usize][tile_index];
                            buffer[offset] = pixel;
                            buffer[offset+1] = pixel;
                            buffer[offset+2] = pixel;
                            // let offset = (y * 8 + j) * pitch + (x * 8 + i) * 3;
                            // let tile_index: usize = i * j;
                            // if tile_map <= 127 {
                            //     let pixel = tile_block_1[tile_map as usize][tile_index];
                            //     buffer[offset] = pixel;
                            //     buffer[offset+1] = pixel;
                            //     buffer[offset+2] = pixel;
                            // } else {
                            //     let pixel = tile_block_0[tile_map as usize][tile_index];
                            //     buffer[offset] = pixel;
                            //     buffer[offset+1] = pixel;
                            //     buffer[offset+2] = pixel;
                            // }
                        }
                    }
                    // println!("{:?}", bg_tile_map.len());
                }
            }
        }).unwrap();
        self.canvas.copy(&texture, None, Some(FRect::new(0.0, 0.0, 256.0, 256.0))).unwrap();
        match scanline {
            143 => self.mode = PpuMode::VerticalBlank,
            _ => (),
        };
        match clock.dots {
            0..=80 => {
                // self.oam_scan(mem, scanline);
                self.mode = PpuMode::OAMScan;
            }
            81..=252 => {
                self.mode = PpuMode::Drawing;
                mem.oam_accessible = false;
                mem.vram_accessible = false;
                if lcdc.window_enable {
                    // println!("window_tile_map: {:?}", lcdc.window_tile_map_area);
                }
                if lcdc.bg_window_enable {
                }
                // TODO: add obj penalty variable mode length algorithm
                self.canvas.present();
            }
            _ => {
                mem.oam_accessible = true;
                mem.vram_accessible = true;
            },
        }
    }
}

pub fn setup_ctx() -> Result<(Canvas<Window>, EventPump), Error> {
    let sdl_context = sdl3::init()?;
    let video_subsystem = sdl_context.video()?;
    let window = video_subsystem
        .window("test", 256, 256)
        .position_centered()
        .build()
        .unwrap();

    Ok((window.into_canvas(), sdl_context.event_pump()?))
}

/// Each tile is 16 bytes, after decoding each tile contains 8x8 pixels and has a color depth of 2 bits per pixel
/// A line is made up of 2 tiles where the even indices specify the LSB of the color and the odd the MSB
/// e.g: given 00111100 01111110 the first byte would be 0x0 and the second byte would be 0x2
pub fn decode_tile(tile: &[u8]) -> [u8; 64] {
    let mut output: [u8; 64] = [0; 64];
    let low: [u8; 8] = [
        tile[0],
        tile[2],
        tile[4],
        tile[6],
        tile[8],
        tile[10],
        tile[12],
        tile[14],
    ];
    let high: [u8; 8] = [
        tile[1],
        tile[3],
        tile[5],
        tile[7],
        tile[9],
        tile[11],
        tile[13],
        tile[15]
    ];
    for i in 0..64 {
        let j = i / 8;
        let k = i % 8;
        let mut pixel = (low[j] >> k) & 1;
        pixel |= ((high[j] >> k) & 1) << 1;
        output[i] = PALETTE[pixel as usize];
    }
    return output;
}

pub mod tests {
    use crate::{dump_tiles, memory::Memory};
    use crate::cartridge::Cartridge;

    use super::{decode_tile, TILES, TILEMAP};
    #[test]
    fn test_decode_tile() {
        let decoded = TILES.chunks_exact(16)
            .map(|tile| decode_tile(tile))
            .collect::<Vec<_>>();
        println!("{:?}", decoded);
        // let image: Vec<u8> = TILEMAP.iter().flat_map(|tilemap| decoded[*tilemap as usize]).collect();
        // let image = vec![];
        // for y in 0..144 {
        //     for x in 0..160 {

        //     }
        // }
        dump_tiles(&decoded[20], 8, 8);
    }
}
pub const TILES: [u8; 1120] = [
    0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
    0x00, 0xff, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
    0x00, 0xff, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x7e,
    0x00, 0xff, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
    0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0x7f,
    0x00, 0xff, 0x03, 0xfc, 0x00, 0xf8, 0x00, 0xf0, 0x00, 0xe0, 0x20, 0xc0, 0x00, 0xc0, 0x40, 0x80,
    0x00, 0xff, 0xc0, 0x3f, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x07, 0x04, 0x03, 0x00, 0x03, 0x02, 0x01,
    0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0x80,
    0x00, 0x7e, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x01, 0xff, 0x01, 0x00, 0x01, 0x01, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x00, 0x01,
    0x00, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x00, 0x80, 0xff, 0x80, 0x7f, 0x80, 0x80, 0x80,
    0x00, 0x7f, 0x2a, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xfa, 0x07, 0xfd, 0x07, 0x02, 0x07,
    0x00, 0x7f, 0x2a, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0x2a, 0x7f,
    0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x80, 0xff,
    0x40, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x00, 0x80, 0x00, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0x80,
    0x00, 0x3c, 0x02, 0x7e, 0x85, 0x7e, 0x0a, 0x7e, 0x14, 0x7e, 0xab, 0x7e, 0x95, 0x7e, 0x2a, 0x7e,
    0x02, 0x01, 0x00, 0x01, 0xff, 0x01, 0x00, 0x01, 0x01, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x00, 0x01,
    0x00, 0xff, 0x80, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f,
    0xf8, 0x07, 0xf8, 0x07, 0xf8, 0x07, 0x80, 0xff, 0x00, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80,
    0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f, 0xd5, 0x7f, 0xaa, 0x7f,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xeb, 0x3c,
    0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff,
    0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0xff,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0x80, 0xff,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0xaa, 0xff,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0x80, 0xff,
    0x7f, 0x80, 0xff, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x00, 0xff,
    0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0x80, 0xff,
    0x3f, 0xc0, 0x3f, 0xc0, 0x3f, 0xc0, 0x1f, 0xe0, 0x1f, 0xe0, 0x0f, 0xf0, 0x03, 0xfc, 0x00, 0xff,
    0xfd, 0x03, 0xfc, 0x03, 0xfd, 0x03, 0xf8, 0x07, 0xf9, 0x07, 0xf0, 0x0f, 0xc1, 0x3f, 0x82, 0xff,
    0x55, 0xff, 0x2a, 0x7e, 0x54, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0x00, 0x7e,
    0x01, 0xff, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01,
    0x54, 0xff, 0xae, 0xf8, 0x50, 0xf0, 0xa0, 0xe0, 0x60, 0xc0, 0x80, 0xc0, 0x40, 0x80, 0x40, 0x80,
    0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0xff, 0x6a, 0x1f, 0x05, 0x0f, 0x02, 0x07, 0x05, 0x07, 0x02, 0x03, 0x03, 0x01, 0x02, 0x01,
    0x54, 0xff, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80,
    0x55, 0xff, 0x2a, 0x1f, 0x0d, 0x07, 0x06, 0x03, 0x01, 0x03, 0x02, 0x01, 0x01, 0x01, 0x00, 0x01,
    0x55, 0xff, 0x2a, 0x7f, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0x2a, 0x7f, 0x55, 0x7f, 0x00, 0x7f,
    0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0xaa, 0xff, 0x55, 0xff, 0x00, 0xff,
    0x15, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x55, 0xff, 0x6a, 0x1f, 0x0d, 0x07, 0x06, 0x03, 0x01, 0x03, 0x02, 0x01, 0x03, 0x01, 0x00, 0x01,
    0x54, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff, 0x50, 0xff, 0xa0, 0xff, 0x40, 0xff, 0x00, 0xff,
    0x00, 0x7e, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xab, 0x76, 0xdd, 0x66, 0x22, 0x66,
    0x00, 0x7c, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7c, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x01, 0xff, 0x01, 0x02, 0x01, 0x07, 0x01, 0xfe, 0x03, 0xfd, 0x07, 0x0a, 0x0f,
    0x00, 0x7c, 0x2a, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e, 0x54, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0x7e,
    0x00, 0xff, 0xa0, 0xff, 0x50, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xa8, 0xff, 0x54, 0xff, 0xaa, 0xff,
    0xdd, 0x62, 0xbf, 0x42, 0xfd, 0x42, 0xbf, 0x40, 0xff, 0x00, 0xff, 0x00, 0xf7, 0x08, 0xef, 0x18,
    0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xab, 0x7c, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e,
    0xf9, 0x07, 0xfc, 0x03, 0xfd, 0x03, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01,
    0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7e, 0xd5, 0x7e, 0xab, 0x7c,
    0xf7, 0x18, 0xeb, 0x1c, 0xd7, 0x3c, 0xeb, 0x3c, 0xd5, 0x3e, 0xab, 0x7e, 0xd5, 0x7e, 0x2a, 0xff,
    0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xfe, 0x01, 0xff, 0x01, 0xa2, 0xff,
    0x7f, 0xc0, 0xbf, 0xc0, 0x7f, 0xc0, 0xbf, 0xe0, 0x5f, 0xe0, 0xaf, 0xf0, 0x57, 0xfc, 0xaa, 0xff,
    0xff, 0x01, 0xfc, 0x03, 0xfd, 0x03, 0xfc, 0x03, 0xf9, 0x07, 0xf0, 0x0f, 0xc1, 0x3f, 0x82, 0xff,
    0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x2a, 0xff, 0x55, 0xff, 0x00, 0xff,
    0x45, 0xff, 0xa2, 0xff, 0x41, 0xff, 0x82, 0xff, 0x41, 0xff, 0x80, 0xff, 0x01, 0xff, 0x00, 0xff,
    0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0xaa, 0xff, 0x54, 0xff, 0x00, 0xff,
    0x15, 0xff, 0x2a, 0xff, 0x15, 0xff, 0x0a, 0xff, 0x15, 0xff, 0x0a, 0xff, 0x01, 0xff, 0x00, 0xff,
    0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x80, 0xff, 0x01, 0xff, 0x00, 0xff,
];

pub const TILEMAP: [u8; 576] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x01, 0x02, 0x03, 0x01, 0x04, 0x03, 0x01, 0x05, 0x00, 0x01, 0x05, 0x00, 0x06, 0x04, 0x07, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0b, 0x0e, 0x0f, 0x08, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x0f, 0x14, 0x1b, 0x0f, 0x14, 0x1c, 0x16, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x22, 0x25, 0x1e, 0x22, 0x25, 0x26, 0x22, 0x27, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x01, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2b, 0x2e, 0x2d, 0x2f, 0x30, 0x2d, 0x31, 0x32, 0x33, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x08, 0x34, 0x0a, 0x0b, 0x11, 0x0a, 0x0b, 0x35, 0x36, 0x0b, 0x0e, 0x0f, 0x08, 0x37, 0x0a, 0x38, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x14, 0x39, 0x16, 0x17, 0x1c, 0x16, 0x17, 0x3a, 0x3b, 0x17, 0x1b, 0x0f, 0x14, 0x3c, 0x16, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x1e, 0x3d, 0x3e, 0x3f, 0x22, 0x27, 0x21, 0x1f, 0x20, 0x21, 0x22, 0x25, 0x1e, 0x22, 0x40, 0x1d, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x30, 0x33, 0x41, 0x45, 0x43, 0x41, 0x30, 0x43, 0x41, 0x30, 0x33, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0,0,0,0,0,0,0,0,0,0,0,0
];
